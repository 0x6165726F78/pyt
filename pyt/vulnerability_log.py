"""This module contains a vulnerability log.

This log is able to give precise information about where a vulnerability is located.
The log is printed to the standard output.
"""


class VulnerabilityLog(object):
    """Log that consists of vulnerabilities."""

    def __init__(self):
        """Initialise list of vulnerabilities."""
        self.vulnerabilities = list()

    def append(self, vulnerability):
        """Add vulnerability to the vulnerabilities list."""
        self.vulnerabilities.append(vulnerability)

    def print_report(self):
        """Print list of vulnerabilities."""
        number_of_vulnerabilities = len(self.vulnerabilities)
        if number_of_vulnerabilities == 1:
            print('%s vulnerability found:' % number_of_vulnerabilities)
        else:
            print('%s vulnerabilities found:' % number_of_vulnerabilities)
              
        for i, vulnerability in enumerate(self.vulnerabilities):
              print('Vulnerability {}:\n{}'.format(i, vulnerability))
            
        
class Vulnerability(object):
    """Vulnerability containing the source and the sources trigger word, the sink and the sinks trigger word."""

    def __init__(self, source, source_trigger_word, sink, sink_trigger_word, secondary_nodes):
        """Set source and sink information."""
        self.source = source
        self.source_trigger_word = source_trigger_word
        self.sink = sink
        self.sink_trigger_word = sink_trigger_word
        self.secondary_nodes = secondary_nodes
        
        self.__remove_sink_from_secondary_nodes()

    def __remove_sink_from_secondary_nodes(self):
        if self.secondary_nodes:
            try:
                self.secondary_nodes.remove(self.sink)
            except ValueError:
                pass
        
    def __str__(self):
        """Pretty printing of a vulnerability."""
        secondary = ''
        if self.secondary_nodes:
            secondary = 'Reassigned in: \n\t' + '\n\t'.join(['Line ' + str(node.line_number) + ': ' + node.label for node in self.secondary_nodes])
            
        return 'User input at line {}, trigger word "{}": \n\t{}\n{}\nreaches line {}, trigger word "{}": \n\t{}'.format(self.source.line_number, self.source_trigger_word, self.source.label, secondary, self.sink.line_number, self.sink_trigger_word, self.sink.label)

class SanitisedVulnerability(Vulnerability):
    """A sanitised vulnerability containing the source and the sources trigger word, the sink and the sinks trigger word. Also containing the sanitiser."""

    def __init__(self, source, source_trigger_word, sink, sink_trigger_word, sanitiser, secondary_nodes):
        """Set source, sink and sanitiser information."""
        super(SanitisedVulnerability, self).__init__(source, source_trigger_word, sink, sink_trigger_word, secondary_nodes)
        self.sanitiser = sanitiser

    def __str__(self):
        """Pretty printing of a vulnerability."""
        super_str = super(SanitisedVulnerability, self).__str__()
        return super_str + '\nThis vulnerability is potentially sanitised by: {}'.format(self.sanitiser)
    
