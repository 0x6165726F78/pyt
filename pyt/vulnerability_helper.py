"""This module contains vulnerability helpers.

Mostly is contains logs to give precise information
 about where a vulnerability is located.
The log is printed to standard output.

It is only used in vulnerabilities.py
"""
from enum import Enum


class VulnerabilityLog():
    """Log that consists of vulnerabilities."""

    def __init__(self):
        """Initialise list of vulnerabilities."""
        self.vulnerabilities = list()

    def append(self, vulnerability):
        """Add vulnerability to the vulnerabilities list."""
        self.vulnerabilities.append(vulnerability)

    def print_report(self):
        """Print list of vulnerabilities."""
        number_of_vulnerabilities = len(self.vulnerabilities)
        if number_of_vulnerabilities == 1:
            print('%s vulnerability found:' % number_of_vulnerabilities)
        else:
            print('%s vulnerabilities found:' % number_of_vulnerabilities)

        for i, vulnerability in enumerate(self.vulnerabilities, start=1):
            print('Vulnerability {}:\n{}\n'.format(i, vulnerability))


class Reassigned():
    def __init__(self, reassignment_nodes):
        self.reassignment_nodes = reassignment_nodes

    def __str__(self):
        reassignment = ''
        if self.reassignment_nodes:
            reassignment += '\nReassigned in:\n\t'
            reassignment += '\n\t'.join([
                'File: ' + node.path + '\n\t' + ' > Line ' +
                str(node.line_number) + ': ' +
                node.label for node in self.reassignment_nodes
            ])
        return reassignment


class Vulnerability():
    """Vulnerability containing the source and the sources trigger word,
    the sink and the sinks trigger word."""

    def __init__(
        self,
        source,
        source_trigger_word,
        sink,
        sink_trigger_word,
        reassignment_nodes
    ):
        """Set source and sink information."""
        self.source = source
        self.source_trigger_word = source_trigger_word
        self.sink = sink
        self.sink_trigger_word = sink_trigger_word

        self.reassignment_nodes = reassignment_nodes
        self._remove_sink_from_secondary_nodes()

    def _remove_sink_from_secondary_nodes(self):
        try:
            self.reassignment_nodes.remove(self.sink)
        except ValueError:
            pass

    def __str__(self):
        """Pretty printing of a vulnerability."""
        reassigned_str = Reassigned(self.reassignment_nodes)
        return (
            'File: {}\n'
            ' > User input at line {}, trigger word "{}":\n'
            '\t {}{}\nFile: {}\n'
            ' > reaches line {}, trigger word "{}":\n'
            '\t{}'.format(
                self.source.path,
                self.source.line_number, self.source_trigger_word,
                self.source.label, reassigned_str, self.sink.path,
                self.sink.line_number, self.sink_trigger_word,
                self.sink.label
            )
        )


class SanitisedVulnerability(Vulnerability):
    """A sanitised vulnerability containing the source and the sources
    trigger word, the sink and the sinks trigger word.
    Also containing the sanitiser."""

    def __init__(
        self,
        source,
        source_trigger_word,
        sink,
        sink_trigger_word,
        reassignment_nodes,
        sanitiser,
        definite
    ):
        """Set source, sink and sanitiser information."""
        super().__init__(
            source,
            source_trigger_word,
            sink,
            sink_trigger_word,
            reassignment_nodes
        )
        self.sanitiser = sanitiser
        self.definite = definite

    def __str__(self):
        """Pretty printing of a vulnerability."""
        return (
            super().__str__() +
            '\nThis vulnerability is ' +
            ('' if self.definite else 'potentially ') +
            'sanitised by: ' +
            str(self.sanitiser)
        )


class UnknownVulnerability(Vulnerability):
    """An unknown vulnerability containing the source and the sources
    trigger word, the sink and the sinks trigger word.
    Also containing the blackbox assignment."""

    def __init__(
        self,
        source,
        source_trigger_word,
        sink,
        sink_trigger_word,
        reassignment_nodes,
        unknown_assignment
    ):
        """Set source, sink and blackbox assignment information."""
        super().__init__(
            source,
            source_trigger_word,
            sink,
            sink_trigger_word,
            reassignment_nodes
        )
        self.unknown_assignment = unknown_assignment

    def __str__(self):
        """Pretty printing of a vulnerability."""
        return (
            super().__str__() +
            '\nThis vulnerability is unknown due to: ' +
            str(self.unknown_assignment)
        )


class VulnerabilityType(Enum):
    FALSE = 0
    SANITISED = 1
    TRUE = 2
    UNKNOWN = 3


def vuln_factory(vulnerability_type):
    if vulnerability_type == VulnerabilityType.UNKNOWN:
        return UnknownVulnerability
    elif vulnerability_type == VulnerabilityType.SANITISED:
        return SanitisedVulnerability
    else:
        return Vulnerability
