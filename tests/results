b'1 vulnerability found:\nVulnerability 1:\nFile: example/vulnerable_code/XSS.py\n > User input at line 6, trigger word "get(": \n\tparam = request.args.get(\'param\', \'not set\')\nReassigned in: \n\tFile: example/vulnerable_code/XSS.py\n\t > Line 10: ret_make_response = resp\nFile: example/vulnerable_code/XSS.py\n > reaches line 9, trigger word "replace(": \n\tresp = make_response(html.replace(\'{{ param }}\', param))\n\n'#¤%&/()=?b'1 vulnerability found:\nVulnerability 1:\nFile: example/vulnerable_code/command_injection.py\n > User input at line 15, trigger word "form[": \n\tparam = request.form[\'suggestion\']\nReassigned in: \n\tFile: example/vulnerable_code/command_injection.py\n\t > Line 16: command = \'echo \' + param + \' >> \' + \'menu.txt\'\nFile: example/vulnerable_code/command_injection.py\n > reaches line 18, trigger word "subprocess.call(": \n\tsubprocess.call(command,shell=True)\n\n'#¤%&/()=?b'1 vulnerability found:\nVulnerability 1:\nFile: example/vulnerable_code/path_traversal.py\n > User input at line 8, trigger word "get(": \n\timage_name = request.args.get(\'image_name\')\nReassigned in: \n\tFile: example/vulnerable_code/path_traversal.py\n\t > Line 10: ret_request.args.get = 404\nFile: example/vulnerable_code/path_traversal.py\n > reaches line 11, trigger word "send_file(": \n\tret_request.args.get = send_file(os.path.join(os.getcwd(), image_name))\n\n'#¤%&/()=?b'2 vulnerabilities found:\nVulnerability 1:\nFile: example/vulnerable_code/path_traversal_sanitised.py\n > User input at line 8, trigger word "get(": \n\timage_name = request.args.get(\'image_name\')\nFile: example/vulnerable_code/path_traversal_sanitised.py\n > reaches line 10, trigger word "replace(": \n\timage_name = image_name.replace(\'..\', \'\')\n\nVulnerability 2:\nFile: example/vulnerable_code/path_traversal_sanitised.py\n > User input at line 8, trigger word "get(": \n\timage_name = request.args.get(\'image_name\')\nFile: example/vulnerable_code/path_traversal_sanitised.py\n > reaches line 12, trigger word "send_file(": \n\tret_image_name.replace = send_file(os.path.join(os.getcwd(), image_name))\nThis vulnerability is potentially sanitised by: ["\'..\'", "\'..\' in"]\n\n'#¤%&/()=?b'2 vulnerabilities found:\nVulnerability 1:\nFile: example/vulnerable_code/sql/sqli.py\n > User input at line 26, trigger word "get(": \n\tparam = request.args.get(\'param\', \'not set\')\nFile: example/vulnerable_code/sql/sqli.py\n > reaches line 27, trigger word "execute(": \n\tresult = db.engine.execute(param)\n\nVulnerability 2:\nFile: example/vulnerable_code/sql/sqli.py\n > User input at line 33, trigger word "get(": \n\tparam = request.args.get(\'param\', \'not set\')\nFile: example/vulnerable_code/sql/sqli.py\n > reaches line 36, trigger word "filter(": \n\tresult = session.query(User).filter(\'username={}\'.format(param))\n\n'#¤%&/()=?b'1 vulnerability found:\nVulnerability 1:\nFile: example/vulnerable_code/XSS_form.py\n > User input at line 14, trigger word "form[": \n\tdata = request.form[\'my_text\']\nReassigned in: \n\tFile: example/vulnerable_code/XSS_form.py\n\t > Line 17: ret_resp.set_cookie = resp\nFile: example/vulnerable_code/XSS_form.py\n > reaches line 15, trigger word "replace(": \n\tresp = make_response(html1.replace(\'{{ data }}\', data))\n\n'#¤%&/()=?b'1 vulnerability found:\nVulnerability 1:\nFile: example/vulnerable_code/XSS_url.py\n > User input at line 4, trigger word "Flask function URL parameter": \n\turl\nReassigned in: \n\tFile: example/vulnerable_code/XSS_url.py\n\t > Line 6: param = url\n\tFile: example/vulnerable_code/XSS_url.py\n\t > Line 10: ret_make_response = resp\nFile: example/vulnerable_code/XSS_url.py\n > reaches line 9, trigger word "replace(": \n\tresp = make_response(html.replace(\'{{ param }}\', param))\n\n'#¤%&/()=?b'0 vulnerabilities found:\n'#¤%&/()=?b'1 vulnerability found:\nVulnerability 1:\nFile: example/vulnerable_code/XSS_reassign.py\n > User input at line 6, trigger word "get(": \n\tparam = request.args.get(\'param\', \'not set\')\nReassigned in: \n\tFile: example/vulnerable_code/XSS_reassign.py\n\t > Line 8: param = param + \'\'\n\tFile: example/vulnerable_code/XSS_reassign.py\n\t > Line 12: ret_make_response = resp\nFile: example/vulnerable_code/XSS_reassign.py\n > reaches line 11, trigger word "replace(": \n\tresp = make_response(html.replace(\'{{ param }}\', param))\n\n'#¤%&/()=?b'1 vulnerability found:\nVulnerability 1:\nFile: example/vulnerable_code/XSS_sanitised.py\n > User input at line 7, trigger word "get(": \n\tparam = request.args.get(\'param\', \'not set\')\nReassigned in: \n\tFile: example/vulnerable_code/XSS_sanitised.py\n\t > Line 9: param = Markup.escape(param)\n\tFile: example/vulnerable_code/XSS_sanitised.py\n\t > Line 13: ret_make_response = resp\nFile: example/vulnerable_code/XSS_sanitised.py\n > reaches line 12, trigger word "replace(": \n\tresp = make_response(html.replace(\'{{ param }}\', param))\nThis vulnerability is potentially sanitised by: [\'escape\']\n\n'#¤%&/()=?b'0 vulnerabilities found:\n'#¤%&/()=?b'1 vulnerability found:\nVulnerability 1:\nFile: example/vulnerable_code/XSS_variable_assign.py\n > User input at line 6, trigger word "get(": \n\tparam = request.args.get(\'param\', \'not set\')\nReassigned in: \n\tFile: example/vulnerable_code/XSS_variable_assign.py\n\t > Line 8: other_var = param + \'\'\n\tFile: example/vulnerable_code/XSS_variable_assign.py\n\t > Line 12: ret_make_response = resp\nFile: example/vulnerable_code/XSS_variable_assign.py\n > reaches line 11, trigger word "replace(": \n\tresp = make_response(html.replace(\'{{ param }}\', other_var))\n\n'#¤%&/()=?b'1 vulnerability found:\nVulnerability 1:\nFile: example/vulnerable_code/XSS_variable_multiple_assign.py\n > User input at line 6, trigger word "get(": \n\tparam = request.args.get(\'param\', \'not set\')\nReassigned in: \n\tFile: example/vulnerable_code/XSS_variable_multiple_assign.py\n\t > Line 8: other_var = param + \'\'\n\tFile: example/vulnerable_code/XSS_variable_multiple_assign.py\n\t > Line 10: not_the_same_var = \'\' + other_var\n\tFile: example/vulnerable_code/XSS_variable_multiple_assign.py\n\t > Line 12: another_one = not_the_same_var + \'\'\n\tFile: example/vulnerable_code/XSS_variable_multiple_assign.py\n\t > Line 17: ret_make_response = resp\nFile: example/vulnerable_code/XSS_variable_multiple_assign.py\n > reaches line 15, trigger word "replace(": \n\tresp = make_response(html.replace(\'{{ param }}\', another_one))\n\n'#¤%&/()=?
