b'1 vulnerability found:\r\nVulnerability 1:\r\nFile: ..\\example\\vulnerable_code\\XSS.py\r\n > User input at line 6, trigger word "get(": \r\n\tparam = request.args.get(\'param\', \'not set\')\r\nReassigned in: \r\n\tFile: ..\\example\\vulnerable_code\\XSS.py\r\n\t > Line 10: ret_make_response = resp\r\nFile: ..\\example\\vulnerable_code\\XSS.py\r\n > reaches line 9, trigger word "replace(": \r\n\tresp = make_response(html.replace(\'{{ param }}\', param))\r\n\r\n'#¤%&/()=?b'1 vulnerability found:\r\nVulnerability 1:\r\nFile: ..\\example\\vulnerable_code\\command_injection.py\r\n > User input at line 15, trigger word "form[": \r\n\tparam = request.form[\'suggestion\']\r\nReassigned in: \r\n\tFile: ..\\example\\vulnerable_code\\command_injection.py\r\n\t > Line 16: command = \'echo \' + param + \' >> \' + \'menu.txt\'\r\nFile: ..\\example\\vulnerable_code\\command_injection.py\r\n > reaches line 18, trigger word "subprocess.call(": \r\n\tsubprocess.call(command,shell=True)\r\n\r\n'#¤%&/()=?b'1 vulnerability found:\r\nVulnerability 1:\r\nFile: ..\\example\\vulnerable_code\\path_traversal.py\r\n > User input at line 8, trigger word "get(": \r\n\timage_name = request.args.get(\'image_name\')\r\nReassigned in: \r\n\tFile: ..\\example\\vulnerable_code\\path_traversal.py\r\n\t > Line 10: ret_request.args.get = 404\r\nFile: ..\\example\\vulnerable_code\\path_traversal.py\r\n > reaches line 11, trigger word "send_file(": \r\n\tret_request.args.get = send_file(os.path.join(os.getcwd(), image_name))\r\n\r\n'#¤%&/()=?b'1 vulnerability found:\r\nVulnerability 1:\r\nFile: ..\\example\\vulnerable_code\\path_traversal_sanitised.py\r\n > User input at line 8, trigger word "get(": \r\n\timage_name = request.args.get(\'image_name\')\r\nReassigned in: \r\n\tFile: ..\\example\\vulnerable_code\\path_traversal_sanitised.py\r\n\t > Line 10: image_name = image_name.replace(\'..\', \'\')\r\nFile: ..\\example\\vulnerable_code\\path_traversal_sanitised.py\r\n > reaches line 12, trigger word "send_file(": \r\n\tret_image_name.replace = send_file(os.path.join(os.getcwd(), image_name))\r\nThis vulnerability is potentially sanitised by: ["\'..\'", "\'..\' in"]\r\n\r\n'#¤%&/()=?b'2 vulnerabilities found:\r\nVulnerability 1:\r\nFile: ..\\example\\vulnerable_code\\sql\\sqli.py\r\n > User input at line 33, trigger word "get(": \r\n\tparam = request.args.get(\'param\', \'not set\')\r\nFile: ..\\example\\vulnerable_code\\sql\\sqli.py\r\n > reaches line 36, trigger word "filter(": \r\n\tresult = session.query(User).filter(\'username={}\'.format(param))\r\n\r\nVulnerability 2:\r\nFile: ..\\example\\vulnerable_code\\sql\\sqli.py\r\n > User input at line 26, trigger word "get(": \r\n\tparam = request.args.get(\'param\', \'not set\')\r\nFile: ..\\example\\vulnerable_code\\sql\\sqli.py\r\n > reaches line 27, trigger word "execute(": \r\n\tresult = db.engine.execute(param)\r\n\r\n'#¤%&/()=?b'1 vulnerability found:\r\nVulnerability 1:\r\nFile: ..\\example\\vulnerable_code\\XSS_form.py\r\n > User input at line 14, trigger word "form[": \r\n\tdata = request.form[\'my_text\']\r\nReassigned in: \r\n\tFile: ..\\example\\vulnerable_code\\XSS_form.py\r\n\t > Line 17: ret_resp.set_cookie = resp\r\nFile: ..\\example\\vulnerable_code\\XSS_form.py\r\n > reaches line 15, trigger word "replace(": \r\n\tresp = make_response(html1.replace(\'{{ data }}\', data))\r\n\r\n'#¤%&/()=?b'1 vulnerability found:\r\nVulnerability 1:\r\nFile: ..\\example\\vulnerable_code\\XSS_url.py\r\n > User input at line 4, trigger word "Flask function URL parameter": \r\n\turl\r\nReassigned in: \r\n\tFile: ..\\example\\vulnerable_code\\XSS_url.py\r\n\t > Line 6: param = url\r\n\tFile: ..\\example\\vulnerable_code\\XSS_url.py\r\n\t > Line 10: ret_make_response = resp\r\nFile: ..\\example\\vulnerable_code\\XSS_url.py\r\n > reaches line 9, trigger word "replace(": \r\n\tresp = make_response(html.replace(\'{{ param }}\', param))\r\n\r\n'#¤%&/()=?b'0 vulnerabilities found:\r\n'#¤%&/()=?b'1 vulnerability found:\r\nVulnerability 1:\r\nFile: ..\\example\\vulnerable_code\\XSS_reassign.py\r\n > User input at line 6, trigger word "get(": \r\n\tparam = request.args.get(\'param\', \'not set\')\r\nReassigned in: \r\n\tFile: ..\\example\\vulnerable_code\\XSS_reassign.py\r\n\t > Line 8: param = param + \'\'\r\n\tFile: ..\\example\\vulnerable_code\\XSS_reassign.py\r\n\t > Line 12: ret_make_response = resp\r\nFile: ..\\example\\vulnerable_code\\XSS_reassign.py\r\n > reaches line 11, trigger word "replace(": \r\n\tresp = make_response(html.replace(\'{{ param }}\', param))\r\n\r\n'#¤%&/()=?b'1 vulnerability found:\r\nVulnerability 1:\r\nFile: ..\\example\\vulnerable_code\\XSS_sanitised.py\r\n > User input at line 7, trigger word "get(": \r\n\tparam = request.args.get(\'param\', \'not set\')\r\nReassigned in: \r\n\tFile: ..\\example\\vulnerable_code\\XSS_sanitised.py\r\n\t > Line 9: param = Markup.escape(param)\r\n\tFile: ..\\example\\vulnerable_code\\XSS_sanitised.py\r\n\t > Line 13: ret_make_response = resp\r\nFile: ..\\example\\vulnerable_code\\XSS_sanitised.py\r\n > reaches line 12, trigger word "replace(": \r\n\tresp = make_response(html.replace(\'{{ param }}\', param))\r\nThis vulnerability is potentially sanitised by: [\'escape\']\r\n\r\n'#¤%&/()=?b'0 vulnerabilities found:\r\n'#¤%&/()=?b'1 vulnerability found:\r\nVulnerability 1:\r\nFile: ..\\example\\vulnerable_code\\XSS_variable_assign.py\r\n > User input at line 6, trigger word "get(": \r\n\tparam = request.args.get(\'param\', \'not set\')\r\nReassigned in: \r\n\tFile: ..\\example\\vulnerable_code\\XSS_variable_assign.py\r\n\t > Line 8: other_var = param + \'\'\r\n\tFile: ..\\example\\vulnerable_code\\XSS_variable_assign.py\r\n\t > Line 12: ret_make_response = resp\r\nFile: ..\\example\\vulnerable_code\\XSS_variable_assign.py\r\n > reaches line 11, trigger word "replace(": \r\n\tresp = make_response(html.replace(\'{{ param }}\', other_var))\r\n\r\n'#¤%&/()=?b'1 vulnerability found:\r\nVulnerability 1:\r\nFile: ..\\example\\vulnerable_code\\XSS_variable_multiple_assign.py\r\n > User input at line 6, trigger word "get(": \r\n\tparam = request.args.get(\'param\', \'not set\')\r\nReassigned in: \r\n\tFile: ..\\example\\vulnerable_code\\XSS_variable_multiple_assign.py\r\n\t > Line 8: other_var = param + \'\'\r\n\tFile: ..\\example\\vulnerable_code\\XSS_variable_multiple_assign.py\r\n\t > Line 10: not_the_same_var = \'\' + other_var\r\n\tFile: ..\\example\\vulnerable_code\\XSS_variable_multiple_assign.py\r\n\t > Line 12: another_one = not_the_same_var + \'\'\r\n\tFile: ..\\example\\vulnerable_code\\XSS_variable_multiple_assign.py\r\n\t > Line 17: ret_make_response = resp\r\nFile: ..\\example\\vulnerable_code\\XSS_variable_multiple_assign.py\r\n > reaches line 15, trigger word "replace(": \r\n\tresp = make_response(html.replace(\'{{ param }}\', another_one))\r\n\r\n'#¤%&/()=?